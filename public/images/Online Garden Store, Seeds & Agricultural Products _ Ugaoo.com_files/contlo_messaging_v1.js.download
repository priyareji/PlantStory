(function () {
    var _zata_server_url = "https://marketing.contlo.com/";
    let docLoaded = false
    let environment = getEnv()
    if (environment === 'development') {
        _zata_server_url = 'http://localhost:3001/'
        // _zata_server_url = 'https://59fdac1a7ba3.ngrok.io/'
    }
    if (environment === 'staging') {
        _zata_server_url = 'https://staging2.contlo.com/'
    }

    const serviceWorkerUrl = 'apps/contlo/service_worker.js'

    var Zajax = {};
    Zajax.post = function (url, params, responseHandler) {
        var xhttp1 = new XMLHttpRequest();
        xhttp1.onreadystatechange = function (response) {
            if (this.readyState == 4 && this.status == 200) {
                var response = JSON.parse(this.responseText)
                responseHandler(response)
            }
        };

        xhttp1.open("POST", url, true);
        xhttp1.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhttp1.send(JSON.stringify(params));
    }


    let CookieHandler = {
        setCookie: function (c_name, value, exdays) {
            var exdate = new Date();

            exdate.setDate(exdate.getDate() + exdays);
            var c_value = escape(value) + ";path=/;" + ((exdays == null) ? "" : "; expires=" + exdate.toUTCString());
            document.cookie = c_name + "=" + c_value;
        },

        getCookie: function (c_name) {
            var i, x, y, ARRcookies = document.cookie.split(";");
            for (i = 0; i < ARRcookies.length; i++) {
                x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                x = x.replace(/^\s+|\s+$/g, "");
                if (x == c_name) {
                    return unescape(y);
                }
            }
            return null;
        }
    }

    document.addEventListener('DOMContentLoaded', messagingInit, false);
    window.addEventListener('load', messagingInit);

    window.mobileCheck = function () {
        let check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    };

    messagingInit()

    function isDefined(val) {
        return (typeof val !== 'undefined' && val !== null)
    }

    function messagingInit() {
        if (!docLoaded) {
            docLoaded = true
            identifyUser()
            // registerPushNotification()
            sendPageEvent()
            var divPlaceholder = document.getElementById("cntl-placeholder-messaging-fixed-item");
            if (!isDefined(divPlaceholder)) {
                let topElement = document.createElement("DIV")
                topElement.id = "cntl-placeholder-messaging-fixed-item"
                document.body.appendChild(topElement)
            }

            addPopupPush()
            if (window.mobileCheck()) {
                addPopupMobile()
            } else {
                addPopupIframe()
            }
            // addPopupIframe()
            // fetchPopupSettings()
            // showConsentForm()
        }
    }

    window.addEventListener('message', function (e) {
        // message that was passed from iframe page
        let message = e.data;
        // console.log(message)
        // alert(JSON.stringify(message))
        if (message.type == 'contlo_popup_resize') {
            var frameElement1 = document.getElementById("cmessage_popup_iframe");
            frameElement1.style.height = (message.height + 10) + 'px';
            frameElement1.style.width = (message.width + 10) + 'px';
            frameElement1.style.minHeight = (message.height + 10) + 'px';
            frameElement1.style.visibility = "visible";
        }

        if (message.type == 'contlo_popup_close') {
            if (message.status == 'cancel') {
                CookieHandler.setCookie('_cnl_popup', 'ab', cancel_cookie_expiry_days)
            }

            if (message.status == 'complete') {
                CookieHandler.setCookie('_cnl_popup', 'cmp', 5000)
            }
            closePopup()
        }

        if (message.type == 'contlo_popup_event') {
            PopupEvent.sendEventData(message.data)
        }

        if (message.type == 'contlo_push_accept') {
            registerPushNotification()
            CookieHandler.setCookie('_cnl_push_popup', 'cmp', 5000)
            closePushPopup()
        }

        if (message.type == 'contlo_push_popup_close') {
            CookieHandler.setCookie('_cnl_push_popup', 'ab', cancel_push_expiry_days)
            closePushPopup()
        }

        if(message.type == 'contlo_popup_next') {
            setUserExternalId(message.data.external_user_id)
            var popupFrame = document.getElementById("cmessage_popup_iframe");
            popupFrame.src = _zata_server_url + message.data.next_url
            setUserExternalId(message.data.external_user_id)
        }
        return true;
    }, false);


    function addPopupIframe() {
        let placeholderFixedItem = document.getElementById("cntl-placeholder-messaging-fixed-item")

        if (isDefined(placeholderFixedItem)) {
            var frameElement1 = document.getElementById("cmessage_popup_iframe");
            if (!isDefined(frameElement1)) {
                var cPopupElement = document.createElement("IFRAME")
                Object.assign(cPopupElement, {
                    frameBorder: "none",
                    id: "cmessage_popup_iframe",
                    style: "z-index: 999999999991; width: 100%; height: 100%; min-width: 610px; min-height: 477px;max-width: 610px; max-height: 500px; position: fixed; margin: 0px;border: 0px;",
                    allowtransparency: "true"
                })

                cPopupElement.style.left = "50%"
                cPopupElement.style.top = "50%"
                cPopupElement.style.transform = 'translate(-50%, -55%)'
                // zStepElement.sandbox = "allow-top-navigation allow-scripts allow-forms"
                placeholderFixedItem.appendChild(cPopupElement)
                cPopupElement.style.display = "none"
                cPopupElement.style.visibility = "hidden"
            } else {
                frameElement1.style.display = "none"
                frameElement1.style.visibility = "hidden"
            }

            // add background
            var frameElementBackground = document.getElementById("cmessage_popup_bacgkground");
            if (frameElementBackground === null) {
                var cPopupBackground = document.createElement("DIV")
                Object.assign(cPopupBackground, {
                    display: "none",
                    id: "cmessage_popup_bacgkground",
                    style: "display: none;position:fixed; left: 0; top:0px; width: 100vw; height: 100vh; z-index: 19998; opacity: 0.5; background: black;",
                })

                placeholderFixedItem.appendChild(cPopupBackground)
            } else {
                frameElementBackground.style.display = "none"
            }

            frameElementBackground = document.getElementById("cmessage_popup_bacgkground");
            frameElementBackground.addEventListener("click", closeBackgroundPopup)
        }
    }

    function identifyUser() {
        let data = fetch_user_identify()
        let ext_user_id = getParameterByName('ext_user_id')
        let tracking_id = getParameterByName('ctrkid')
        let params = {}
        if (isDefined(data['email']) && data['email'] !== "") {
            params = {public_key: getShopId(), channel: (window.mobileCheck() ? 'mobile' : 'desktop'),
                email: data['email']}
        } else if (isDefined(ext_user_id)) {
            params = {
                public_key: getShopId(), channel: (window.mobileCheck() ? 'mobile' : 'desktop'),
                ext_user_id: ext_user_id,
                tracking_id: tracking_id
            }
        } else {
            return
        }

        Zajax.post(_zata_server_url + "events/identify_user", params,
            function (response) {
                if (isDefined(response.ext_user_id)) {
                    setUserExternalId(response.ext_user_id)
                }
            })
    }

    function sendPageEvent() {
        let page_location = window.location.href
        let externalUserId = getUserExternalId()
        if (!isDefined(externalUserId) || externalUserId == "") return;
        let params = {public_key: getShopId(), channel: (window.mobileCheck() ? 'mobile' : 'desktop'),
            page_location: page_location, external_user_id: externalUserId}
        Zajax.post(_zata_server_url + "events/record_page_event", params,
            function (response) {
                if (response.success) {
                    console.log("event sent..")
                }
            })
    }

    function addPopupPush() {
        let placeholderFixedItem = document.getElementById("cntl-placeholder-messaging-fixed-item")
        if (isDefined(placeholderFixedItem)) {
            var frameElement1 = document.getElementById("cmessage_push_popup_iframe");
            if (!isDefined(frameElement1)) {
                var cPopupElement1 = document.createElement("IFRAME")
                if (!window.mobileCheck()) {
                    Object.assign(cPopupElement1, {
                        frameBorder: "none",
                        id: "cmessage_push_popup_iframe",
                        style: "z-index: 999999999981; width: 100%; height: 100%; min-width: 480px; min-height: 160px;max-width: 480px; box-shadow: 0 0px 8px 0 rgba(0,0,0,0.2);max-height: 160px; position: fixed; margin: 0px;border: 0px;",
                        allowtransparency: "true"
                    })
                } else {
                    Object.assign(cPopupElement1, {
                        frameBorder: "none",
                        id: "cmessage_push_popup_iframe",
                        style: "z-index: 999999999981; width: 100%; height: 100%; min-width: 340px; min-height: 180px;max-width: 340px; box-shadow: 0 0px 8px 0 rgba(0,0,0,0.2);max-height: 160px; position: fixed; margin: 0px;border: 0px;",
                        allowtransparency: "true"
                    })
                }

                cPopupElement1.style.left = "50%"
                cPopupElement1.style.top = "5%"
                cPopupElement1.style.transform = 'translate(-50%, 0%)'
                // zStepElement.sandbox = "allow-top-navigation allow-scripts allow-forms"
                placeholderFixedItem.appendChild(cPopupElement1)
                cPopupElement1.style.display = "none"
                cPopupElement1.style.visibility = "hidden"
            } else {
                frameElement1.style.display = "none"
                frameElement1.style.visibility = "hidden"
            }
        }
    }
    function addPopupMobile() {
        let placeholderFixedItem = document.getElementById("cntl-placeholder-messaging-fixed-item")

        if (isDefined(placeholderFixedItem)) {
            var frameElement1 = document.getElementById("cmessage_popup_iframe");
            if (frameElement1 === null) {
                var cPopupElement = document.createElement("IFRAME")
                Object.assign(cPopupElement, {
                    frameBorder: "none",
                    id: "cmessage_popup_iframe",
                    style: "z-index: 999999999991; width: 100%; height: 100%; max-width: 90%; max-height: 500px; position: fixed; margin: 0px;border: 0px;box-shadow: 0 0px 8px 0 rgba(0,0,0,0.2);",
                    allowtransparency: "true"
                })

                cPopupElement.style.left = "50%"
                cPopupElement.style.bottom = "2%"
                cPopupElement.style.transform = 'translate(-50%, -0%)'
                // zStepElement.sandbox = "allow-top-navigation allow-scripts allow-forms"
                placeholderFixedItem.appendChild(cPopupElement)
                cPopupElement.style.display = "none"
                cPopupElement.style.visibility = "hidden"
            } else {
                frameElement1.style.display = "none"
                frameElement1.style.visibility = "hidden"
            }
        }
    }

    function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    function getShopId() {
        let mainElement = document.getElementById("cntl-placeholder-messaging-fixed-item")
        let key = ""
        if (isDefined(mainElement)) {
            key = mainElement.getAttribute("data-public-key")
        }
        return key
    }

    function getEnv() {
        let mainElement = document.getElementById("cntl-placeholder-messaging-fixed-item")
        let key = ""
        if (isDefined(mainElement)) {
            key = mainElement.getAttribute("data-env")
        }
        return key
    }

    function getUserExternalId() {
        let extUserId = CookieHandler.getCookie('_cnt_ext_user_id')

        if (isDefined(extUserId)) {
            return extUserId;
        }
        return ""
    }

    function setUserExternalId(external_user_id) {
        CookieHandler.setCookie('_cnt_ext_user_id', external_user_id, 600)
    }

    function getPopupUrl() {
        let public_key = getShopId()
        let element = document.getElementById("ctnl-messaging")
        if (window.mobileCheck()) {
            if(email_popup_enabled) {
                return "/popup/mobile_email/" + public_key
            } else {
                return "/popup/mobile_sms/" + public_key
            }

        } else {
            if(email_popup_enabled) {
                return "/popup/desktop_email/" + public_key
            } else {
                return "/popup/desktop_sms/" + public_key
            }
        }
    }

    function getPushPopupUrl() {
        let public_key = getShopId()
        let element = document.getElementById("ctnl-messaging")
        if (webpush_is_enabled) {
            return "/popup/push_consent/" + public_key
        }
    }

    function closeBackgroundPopup() {
        CookieHandler.setCookie('_cnl_popup', 'ab', cancel_cookie_expiry_days)
        closePopup()
    }

    function closePopup() {
        let placeholderFixedItem = document.getElementById("cntl-placeholder-messaging-fixed-item")
        if (isDefined(placeholderFixedItem)) {
            placeholderFixedItem.style.display = "none"
        }

        let frameElementBackground = document.getElementById("cmessage_popup_bacgkground")
        if (isDefined(frameElementBackground)) {
            frameElementBackground.style.display = "none"
        }
    }

    function closePushPopup() {
        let placeholderFixedItem = document.getElementById("cntl-placeholder-messaging-fixed-item")
        if (isDefined(placeholderFixedItem)) {
            placeholderFixedItem.style.display = "none"
        }
    }


    function fetchPopupSettings() {
        let page_location = window.location.href
        params = {public_key: getShopId(), channel: (window.mobileCheck() ? 'mobile' : 'desktop'),
            page_location: page_location}
        Zajax.post(_zata_server_url + "popup/settings", params,
            function (response) {
                handleSettingsResponse(response)
            })
    }

    let pushDelaySeconds = 10
    let delaySeconds = 10
    let phone_number_popup_enabled = true
    let email_popup_enabled = true
    let cancel_cookie_expiry_days = 30
    let cancel_push_expiry_days = 30
    let webpush_is_enabled = false
    let pushOptinType = 'Browser'

    function handleSettingsResponse(response) {
        if (response.success && isDefined(response.settings)) {
            let popupVal = CookieHandler.getCookie('_cnl_popup')
            let pushPopupVal = CookieHandler.getCookie('_cnl_push_popup')
            if (!isDefined(popupVal) || (popupVal !== 'ab' && popupVal !== 'cmp')) {
                if (response.settings.is_enabled) {
                    delaySeconds = response.settings.delay_seconds
                    phone_number_popup_enabled = response.settings.phone_number_enabled
                    email_popup_enabled = response.settings.email_enabled
                    cancel_cookie_expiry_days = response.settings.cancel_cookie_expiry_days;
                    showConsentForm()
                }
            }
        }
    }

    function showConsentForm() {
        window.setTimeout(function () {
            var popupFrame = document.getElementById("cmessage_popup_iframe");
            popupFrame.src = _zata_server_url + getPopupUrl()
            popupFrame.style.display = "block"

            var frameElementBackground = document.getElementById("cmessage_popup_bacgkground");
            if (isDefined(frameElementBackground)) {
                frameElementBackground.style.display = "block"
            }
        }, delaySeconds * 1000);
    }

    function showPushConsent() {
        window.setTimeout(function () {
            if(pushOptinType == 'Custom') {
                var popupFrame = document.getElementById("cmessage_push_popup_iframe");
                popupFrame.src = _zata_server_url + getPushPopupUrl()
                popupFrame.style.display = "block"
                popupFrame.style.visibility = "visible"
            } else {
                registerPushNotification()
            }

        }, pushDelaySeconds * 1000);
    }

    function findOrCreateEventUserCookie() {
        let eventUserId = CookieHandler.getCookie('_cnt_event_user_id')
        if (eventUserId === null || typeof eventUserId === 'undefined') {
            CookieHandler.setCookie('_cnt_event_user_id', (Math.random() + 1).toString(36).substr(2) + (Math.random() + 1).toString(36).substr(2), 600)
            eventUserId = CookieHandler.getCookie('_cnt_event_user_id')
        }
        return eventUserId
    }


    function registerPushNotification() {
        // Register a Service Worker.
        navigator.serviceWorker.register(serviceWorkerUrl)
            .then(function(serviceWorkerRegistration) {
                var serviceWorker;
                if (serviceWorkerRegistration.installing) {
                    serviceWorker = serviceWorkerRegistration.installing;
                    console.log('Service worker installing');
                } else if (serviceWorkerRegistration.waiting) {
                    serviceWorker = serviceWorkerRegistration.waiting;
                    console.log('Service worker installed & waiting');
                } else if (serviceWorkerRegistration.active) {
                    serviceWorker = serviceWorkerRegistration.active;
                    console.log('Service worker active');
                }

                if (serviceWorker) {
                    console.log("sw current state", serviceWorker.state);
                    if (serviceWorker.state === "activated") {
                        onServiceWorkerRegistered(serviceWorkerRegistration)
                        return;
                    }
                    serviceWorker.addEventListener("statechange", function(e) {
                        if (e.target.state == "activated") {
                            // use pushManger for subscribing here.
                            console.log("Service worker activated on state change")
                            onServiceWorkerRegistered(serviceWorkerRegistration)
                        }
                    });
                } else {
                    console.log('service worker null');
                }
            });

    }

    const onServiceWorkerRegistered = async (swRegistration) => {
        console.log('onServiceWorkerRegistered');
        try {
            const applicationServerKey =
                urlB64ToUint8Array("BPx76JbafdeAqZZa7YZjRX8-EMIvE2-J1Wmd0_Ap7TUX1cIs-5ohoRXJSiaDdUw8ioe9KxDcUrFZlgdDfvlWYXg");
            const options = { applicationServerKey, userVisibleOnly: true };
            const subscription = await swRegistration.pushManager.subscribe(options);
            const response = await saveSubscription(subscription);
        } catch (err) {
            console.log(err, 'error');
        }
    }

    const urlB64ToUint8Array = (base64String) => {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/')
        const rawData = atob(base64)
        const outputArray = new Uint8Array(rawData.length)
        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i)
        }
        return outputArray
    }

    function saveSubscription(subscription) {
        var rawKey = subscription.getKey ? subscription.getKey('p256dh') : '';
        let key = rawKey ?
            btoa(String.fromCharCode.apply(null, new Uint8Array(rawKey))) : '';
        var rawAuthSecret = subscription.getKey ? subscription.getKey('auth') : '';
        let authSecret = rawAuthSecret ?
            btoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret))) : '';

        let externalUserId = getUserExternalId()
        // Send the subscription details to the server using the Fetch API.
        let params = {
            public_key: getShopId(),
            channel: (window.mobileCheck() ? 'mobile' : 'desktop'),
            ext_user_id: externalUserId,
            endpoint: subscription.endpoint,
            key: key,
            auth_secret: authSecret,
        }

        Zajax.post(_zata_server_url + "popup/signup_push_notification", params,
            function (response) {
                if (isDefined(response.ext_user_id)) {
                    setUserExternalId(response.ext_user_id)
                }
            })
    }
    let PopupEvent = {
        sendEventData: function (request_data) {
            let eventUserId = findOrCreateEventUserCookie()
            let params = request_data
            params['event_user_id'] = eventUserId
            Zajax.post(_zata_server_url + "popup/record_event", params,
                function (response) {
                    if (response['success']) {
                        return
                    }
                })
        }
    }

    function fetch_user_identify() {
        if (!isDefined(window.cntl_events)) return {}
        for (let i = 0; i < window.cntl_events.length; i++) {
            if (window.cntl_events[i][0] === 'user_identify') {
                return window.cntl_events[i][1]
            }
        }
        return {}
    }
})();