<style>
    .custom-card {
        width: 1400px;
        /* Adjust the desired width */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
        /* Inner shadow effect */
        margin-top: 30px;
        /* Adjust the desired gap from the header */
        border-radius: 20px;
    }

    .table {
        margin-bottom: 0;
        border-collapse: collapse;
    }

    .table thead th {
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .table td,
    .table th {
        border: none;
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem;
    }

    .table tbody tr:last-child td {
        border-bottom: none;
    }

    .tableheader {
        margin-top: 50px;
        margin-bottom: 50px;
        border-radius: 50px;
    }

    /* Custom styles for the "View" button */
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    /* Optional: Add custom styles for the modal */
    .modal-dialog.modal-dialog-scrollable {
        max-height: calc(100vh - 200px);
        /* Adjust the desired max-height for the modal */
        margin-top: 100px;
        /* Adjust the desired margin-top for the modal */
    }

    .modal-body {
        overflow-y: auto;
        /* Enable vertical scrolling */
    }

    .view-btn {
        white-space: nowrap;
        /* Prevent button text wrapping */
    }

    .table tbody tr {
        border-bottom: 1px solid rgba(222, 226, 230, 0.5);
        /* Lighter border color */
    }

    .pagination {
  margin-top: 10px;
  text-align: center;
}

.pagination a,
.pagination span {
  display: inline-block;
  padding: 8px 12px;
  margin: 0 4px;
  color: #000;
  text-decoration: none;
  border: 1px solid #ccc;
  border-radius: 3px;
}

.pagination a:hover {
  background-color: #f4f4f4;
}

.pagination .current-page {
  background-color: #5ca077;
  color: #fff;
  font-weight: bold;
}

.pagination .disabled {
  color: #777;
  cursor: not-allowed;
}

</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">

{{>user-header}}
{{#if orderDetails.length}}
<div class="container tableheader">
    <div class="row justify-content-center mt-4">
        <div class="card custom-card">
            <div class="card-body">
                <h3 class="card-title" style="color: rgb(65, 65, 64);">ORDER DETAILS</h3>
 <div class="table-responsive">
  <table class="table table-bordered table-striped">
    <thead>
      <tr>
        <th scope="col">DATE</th>
        <th scope="col">ORDER ID</th>
        <th scope="col">TOTAL PRICE</th>
        <th scope="col">PAYMENT METHOD</th>
        <th scope="col">STATUS</th>
        <th scope="col">ORDERS</th>
      </tr>
    </thead>
    <tbody>
      {{#each orderDetails}}
      <tr>
        <td scope="row">{{this.date}}</td>
        <td>{{this._id}}</td>
        <td>{{this.orderValue}}</td>
        <td>{{this.paymentMethod}}</td>
        <td>{{this.orderStatus}}</td>
        <td>
          <a href="/ordersView?id={{this._id}}"
            class="btn btn-warning btn-sm btn-block view-btn" style="color: #ffffff;"
            type="button">View</a>
        </td>
      </tr>
      {{/each}}
    </tbody>
  </table>
</div>

<!-- Pagination links -->
<!-- Pagination links -->
{{#if totalPages}}
  <div class="pagination">
    {{#if (gt totalPages 1)}}
      {{#if (gt currentPage 1)}}
        <a href="?id={{_id}}&page={{subtract currentPage 1}}">&laquo; Previous</a>
      {{else}}
        <span class="disabled">&laquo; Previous</span>
      {{/if}}

      {{#each (range 1 totalPages)}}
        {{#if (eq this currentPage)}}
          <span class="current-page">{{this}}</span>
        {{else}}
          <a href="?id={{_id}}&page={{this}}">{{this}}</a>
        {{/if}}
      {{/each}}

      {{#if (lt currentPage totalPages)}}
        <a href="?id={{_id}}&page={{add currentPage 1}}">Next &raquo;</a>
      {{else}}
        <span class="disabled">Next &raquo;</span>
      {{/if}}
    {{/if}}
  </div>
{{/if}}


            </div>
        </div>
    </div>
</div>
{{else}}
<!-- No order history message -->
<div class="card card-1 mt-5 mb-5">
    <div class="card-body text-center">
        <h4 class="mb-4">No Order History</h4>
        <div class="zoomIn animated">
            <i class="fa fa-search fa-5x"></i>
        </div>
        <p class="mt-3">You haven't placed any orders yet.</p>
        <a href="/home" class="btn btn-warning" style="color: #ffffff;">Shop Now</a>
    </div>
</div>
</div>
{{/if}}


 {{!-- <div class="pagination-area mt-30 mb-50">
    <nav aria-label="Page navigation example">
      <ul class="pagination justify-content-start">
        <li class="page-item active"><a class="page-link" href="#">01</a></li>
        <li class="page-item"><a class="page-link" href="#">02</a></li>
        <li class="page-item"><a class="page-link" href="#">03</a></li>
        <li class="page-item"><a class="page-link dot" href="#">...</a></li>
        <li class="page-item"><a class="page-link" href="#">16</a></li>
        <li class="page-item"><a class="page-link" href="#"><i class="material-icons md-chevron_right"></i></a></li>
      </ul>
    </nav>
  </div> --}}

<script>// Assuming you have Handlebars registered as `hbs` or `handlebars`
const Handlebars = require('handlebars');

// Define the range helper
Handlebars.registerHelper('range', function(start, end) {
  const range = [];
  for (let i = start; i <= end; i++) {
    range.push(i);
  }
  return range;
});
</script>

{{!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script> --}}
{{!-- <script> 
    const itemsPerPage = 10; // Number of items to display per page
let currentPage = 1; // Current page number

// Function to calculate the total number of pages
function calculateTotalPages(items) {
  return Math.ceil(items.length / itemsPerPage);
}

// Function to select a subset of items for the current page
function getPaginatedItems(items, currentPage) {
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  return items.slice(startIndex, endIndex);
}

// Calculate total pages
const totalPages = calculateTotalPages(orderDetails);

// Get paginated items for the current page
const paginatedItems = getPaginatedItems(orderDetails, currentPage);

// Pass the paginated items and pagination information to your Handlebars template
const templateData = {
  orderDetails: paginatedItems,
  totalPages: totalPages,
  currentPage: currentPage
};
</script> --}}